////
/// Functions
/// @group Mixins
/// @author Damian Muti
////


/// Debug layout by drawing borders around every element
/// Uncomment the following line to debug layout's box model.
/// include edit();
@mixin debug-layout() {
	* { outline: 2px dotted red; }
	* * { outline: 2px dotted green; }
	* * * { outline: 2px dotted orange; }
	* * * * { outline: 2px dotted blue; }
	* * * * * { outline: 1px solid red; }
	* * * * * * { outline: 1px solid green; }
	* * * * * * * { outline: 1px solid orange; }
	* * * * * * * * { outline: 1px solid blue; }
}

/// Control element's aspect ratio
/// @param {number} width - The width
/// @param {number} height - The height
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

/// Style input's placeholder
@mixin placeholder {
  ::-webkit-input-placeholder {@content;}
  :-moz-placeholder           {@content;}
  ::-moz-placeholder          {@content;}
  :-ms-input-placeholder      {@content;}
}

/// Create a single media condition out of a map of queries
/// @param {String} queries - The queries
@mixin media($queries) {
  @if length($queries) == 0 {
    @content;
  } @else {
    $first-key: nth(map-keys($queries), 1);

    @media ($first-key: map-get($queries, $first-key)) {
      $queries: map-remove($queries, $first-key);

      @include media($queries) {
        @content;
      }
    }
  }
}

/// Gets the media query from the Media Queries List Configured in `$msuif-breakpoints`
/// @param {String} breakpoint - The breakpoint to search on `$msuif-breakpoints` List
@mixin respond-to($breakpoint) {
  // Get the query map for $msuif-breakpoints map
  $queries: map-get($msuif-breakpoints, $breakpoint);

  // If there is no query called $breakpoint in map, throw an error
  @if not $queries {
    @error "No value could be retrieved from `#{$breakpoint}`. Please make sure it is defined in `$msuif-breakpoints` map.";
  }

  // Include the media mixin with $queries
  @include media($queries) {
    @content;
  }
}

// Main wrapper
@mixin main-wrapper ($background-color:$color-white,$lateral-padding:8%) {
	background-color: $background-color;
  text-align: center;
  padding: 5% $lateral-padding;

	@include respond-to('ismobile'){
		padding: 5% 0;
	};

	h1 {
    color: $color-orange;
    margin-bottom: torem(30px);

		@include respond-to('ismobile') {
      padding: 0 40px;
    }

    @include respond-to('ipad') {
      padding: 0 40px;
    }
  }
}

//photo profile inside of circle
@mixin photo-circle ($size:large) {
  background-repeat: no-repeat;
  background-position: 50%;
  background-size: cover;
  border-radius: 50%;
  overflow: hidden;

  @if $size == large {
    height: 180px;
    width: 180px;

  }@else if $size == small {

    height: torem(85px);
    width: torem(85px);
    @include respond-to('ismobile') {
      height: toem(60px);
      width: toem(60px);
  	}

    @include respond-to('ipad') {
      height: toem(60px);
      width: toem(60px);
    }

  }
}

//global flags images
@mixin flag-image {
	border-radius: 0px;
	height: auto;
	width: toem(30px);
}

// tiles


@mixin profile {
  display: flex;
  justify-content: space-around;
  align-items: baseline;
  width: 95%;
  margin: auto;
}

@mixin individual {
  padding: 20px 20px 0 20px;
  border-radius: torem(15px);
  min-height: toem(420px);
}

// MY Pulse

@mixin myPulse {
	@include main-wrapper;
	width: 75%;
	background-color: $color-white;
	border-top: toem(4px) solid $color-gray;
	padding-bottom: toem(50px);

	@include respond-to('ismobile') {
		width: 100%;
		padding: 5% 2%;
		border-top: toem(2px) solid $color-gray;
	}

	@include respond-to('ipad') {
		width: 100%;
		padding: 5% 5%;
		border-top: toem(2px) solid $color-gray;
	}
}
